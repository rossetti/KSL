/*
 * This file is generated by jOOQ.
 */
package ksl.utilities.io.dbutil.ksldbjooq.tables.records


import ksl.utilities.io.dbutil.ksldbjooq.tables.Experiment

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record15
import org.jooq.Row15
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ExperimentRecord() : UpdatableRecordImpl<ExperimentRecord>(Experiment.EXPERIMENT), Record15<Int?, String?, String?, String?, Int?, Boolean?, Double?, Double?, Long?, Boolean?, Boolean?, Boolean?, Boolean?, Int?, Boolean?> {

    open var expId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var simName: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var modelName: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var expName: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var numReps: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    @Suppress("INAPPLICABLE_JVM_NAME")
    @set:JvmName("setIsChunked")
    open var isChunked: Boolean?
        set(value): Unit = set(5, value)
        get(): Boolean? = get(5) as Boolean?

    open var lengthOfRep: Double?
        set(value): Unit = set(6, value)
        get(): Double? = get(6) as Double?

    open var lengthOfWarmUp: Double?
        set(value): Unit = set(7, value)
        get(): Double? = get(7) as Double?

    open var repAllowedExecTime: Long?
        set(value): Unit = set(8, value)
        get(): Long? = get(8) as Long?

    open var repInitOption: Boolean?
        set(value): Unit = set(9, value)
        get(): Boolean? = get(9) as Boolean?

    open var resetStartStreamOption: Boolean?
        set(value): Unit = set(10, value)
        get(): Boolean? = get(10) as Boolean?

    open var antitheticOption: Boolean?
        set(value): Unit = set(11, value)
        get(): Boolean? = get(11) as Boolean?

    open var advNextSubStreamOption: Boolean?
        set(value): Unit = set(12, value)
        get(): Boolean? = get(12) as Boolean?

    open var numStreamAdvances: Int?
        set(value): Unit = set(13, value)
        get(): Int? = get(13) as Int?

    open var gcAfterRepOption: Boolean?
        set(value): Unit = set(14, value)
        get(): Boolean? = get(14) as Boolean?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record15 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row15<Int?, String?, String?, String?, Int?, Boolean?, Double?, Double?, Long?, Boolean?, Boolean?, Boolean?, Boolean?, Int?, Boolean?> = super.fieldsRow() as Row15<Int?, String?, String?, String?, Int?, Boolean?, Double?, Double?, Long?, Boolean?, Boolean?, Boolean?, Boolean?, Int?, Boolean?>
    override fun valuesRow(): Row15<Int?, String?, String?, String?, Int?, Boolean?, Double?, Double?, Long?, Boolean?, Boolean?, Boolean?, Boolean?, Int?, Boolean?> = super.valuesRow() as Row15<Int?, String?, String?, String?, Int?, Boolean?, Double?, Double?, Long?, Boolean?, Boolean?, Boolean?, Boolean?, Int?, Boolean?>
    override fun field1(): Field<Int?> = Experiment.EXPERIMENT.EXP_ID
    override fun field2(): Field<String?> = Experiment.EXPERIMENT.SIM_NAME
    override fun field3(): Field<String?> = Experiment.EXPERIMENT.MODEL_NAME
    override fun field4(): Field<String?> = Experiment.EXPERIMENT.EXP_NAME
    override fun field5(): Field<Int?> = Experiment.EXPERIMENT.NUM_REPS
    override fun field6(): Field<Boolean?> = Experiment.EXPERIMENT.IS_CHUNKED
    override fun field7(): Field<Double?> = Experiment.EXPERIMENT.LENGTH_OF_REP
    override fun field8(): Field<Double?> = Experiment.EXPERIMENT.LENGTH_OF_WARM_UP
    override fun field9(): Field<Long?> = Experiment.EXPERIMENT.REP_ALLOWED_EXEC_TIME
    override fun field10(): Field<Boolean?> = Experiment.EXPERIMENT.REP_INIT_OPTION
    override fun field11(): Field<Boolean?> = Experiment.EXPERIMENT.RESET_START_STREAM_OPTION
    override fun field12(): Field<Boolean?> = Experiment.EXPERIMENT.ANTITHETIC_OPTION
    override fun field13(): Field<Boolean?> = Experiment.EXPERIMENT.ADV_NEXT_SUB_STREAM_OPTION
    override fun field14(): Field<Int?> = Experiment.EXPERIMENT.NUM_STREAM_ADVANCES
    override fun field15(): Field<Boolean?> = Experiment.EXPERIMENT.GC_AFTER_REP_OPTION
    override fun component1(): Int? = expId
    override fun component2(): String? = simName
    override fun component3(): String? = modelName
    override fun component4(): String? = expName
    override fun component5(): Int? = numReps
    override fun component6(): Boolean? = isChunked
    override fun component7(): Double? = lengthOfRep
    override fun component8(): Double? = lengthOfWarmUp
    override fun component9(): Long? = repAllowedExecTime
    override fun component10(): Boolean? = repInitOption
    override fun component11(): Boolean? = resetStartStreamOption
    override fun component12(): Boolean? = antitheticOption
    override fun component13(): Boolean? = advNextSubStreamOption
    override fun component14(): Int? = numStreamAdvances
    override fun component15(): Boolean? = gcAfterRepOption
    override fun value1(): Int? = expId
    override fun value2(): String? = simName
    override fun value3(): String? = modelName
    override fun value4(): String? = expName
    override fun value5(): Int? = numReps
    override fun value6(): Boolean? = isChunked
    override fun value7(): Double? = lengthOfRep
    override fun value8(): Double? = lengthOfWarmUp
    override fun value9(): Long? = repAllowedExecTime
    override fun value10(): Boolean? = repInitOption
    override fun value11(): Boolean? = resetStartStreamOption
    override fun value12(): Boolean? = antitheticOption
    override fun value13(): Boolean? = advNextSubStreamOption
    override fun value14(): Int? = numStreamAdvances
    override fun value15(): Boolean? = gcAfterRepOption

    override fun value1(value: Int?): ExperimentRecord {
        this.expId = value
        return this
    }

    override fun value2(value: String?): ExperimentRecord {
        this.simName = value
        return this
    }

    override fun value3(value: String?): ExperimentRecord {
        this.modelName = value
        return this
    }

    override fun value4(value: String?): ExperimentRecord {
        this.expName = value
        return this
    }

    override fun value5(value: Int?): ExperimentRecord {
        this.numReps = value
        return this
    }

    override fun value6(value: Boolean?): ExperimentRecord {
        this.isChunked = value
        return this
    }

    override fun value7(value: Double?): ExperimentRecord {
        this.lengthOfRep = value
        return this
    }

    override fun value8(value: Double?): ExperimentRecord {
        this.lengthOfWarmUp = value
        return this
    }

    override fun value9(value: Long?): ExperimentRecord {
        this.repAllowedExecTime = value
        return this
    }

    override fun value10(value: Boolean?): ExperimentRecord {
        this.repInitOption = value
        return this
    }

    override fun value11(value: Boolean?): ExperimentRecord {
        this.resetStartStreamOption = value
        return this
    }

    override fun value12(value: Boolean?): ExperimentRecord {
        this.antitheticOption = value
        return this
    }

    override fun value13(value: Boolean?): ExperimentRecord {
        this.advNextSubStreamOption = value
        return this
    }

    override fun value14(value: Int?): ExperimentRecord {
        this.numStreamAdvances = value
        return this
    }

    override fun value15(value: Boolean?): ExperimentRecord {
        this.gcAfterRepOption = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?, value4: String?, value5: Int?, value6: Boolean?, value7: Double?, value8: Double?, value9: Long?, value10: Boolean?, value11: Boolean?, value12: Boolean?, value13: Boolean?, value14: Int?, value15: Boolean?): ExperimentRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        this.value11(value11)
        this.value12(value12)
        this.value13(value13)
        this.value14(value14)
        this.value15(value15)
        return this
    }

    /**
     * Create a detached, initialised ExperimentRecord
     */
    constructor(expId: Int? = null, simName: String? = null, modelName: String? = null, expName: String? = null, numReps: Int? = null, isChunked: Boolean? = null, lengthOfRep: Double? = null, lengthOfWarmUp: Double? = null, repAllowedExecTime: Long? = null, repInitOption: Boolean? = null, resetStartStreamOption: Boolean? = null, antitheticOption: Boolean? = null, advNextSubStreamOption: Boolean? = null, numStreamAdvances: Int? = null, gcAfterRepOption: Boolean? = null): this() {
        this.expId = expId
        this.simName = simName
        this.modelName = modelName
        this.expName = expName
        this.numReps = numReps
        this.isChunked = isChunked
        this.lengthOfRep = lengthOfRep
        this.lengthOfWarmUp = lengthOfWarmUp
        this.repAllowedExecTime = repAllowedExecTime
        this.repInitOption = repInitOption
        this.resetStartStreamOption = resetStartStreamOption
        this.antitheticOption = antitheticOption
        this.advNextSubStreamOption = advNextSubStreamOption
        this.numStreamAdvances = numStreamAdvances
        this.gcAfterRepOption = gcAfterRepOption
    }
}
