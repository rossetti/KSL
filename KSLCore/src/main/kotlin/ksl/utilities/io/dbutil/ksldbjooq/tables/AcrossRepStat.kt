/*
 * This file is generated by jOOQ.
 */
package ksl.utilities.io.dbutil.ksldbjooq.tables


import java.util.function.Function

import kotlin.collections.List

import ksl.utilities.io.dbutil.ksldbjooq.KslDb
import ksl.utilities.io.dbutil.ksldbjooq.indexes.ARS_ME_FK_INDEX
import ksl.utilities.io.dbutil.ksldbjooq.keys.ARS_SIMRUN_FK
import ksl.utilities.io.dbutil.ksldbjooq.tables.records.AcrossRepStatRecord

import org.jooq.Check
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row21
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AcrossRepStat(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, AcrossRepStatRecord>?,
    aliased: Table<AcrossRepStatRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<AcrossRepStatRecord>(
    alias,
    KslDb.KSL_DB,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>KSL_DB.ACROSS_REP_STAT</code>
         */
        val ACROSS_REP_STAT: AcrossRepStat = AcrossRepStat()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<AcrossRepStatRecord> = AcrossRepStatRecord::class.java

    /**
     * The column <code>KSL_DB.ACROSS_REP_STAT.ID</code>.
     */
    val ID: TableField<AcrossRepStatRecord, Int?> = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>KSL_DB.ACROSS_REP_STAT.ELEMENT_ID_FK</code>.
     */
    val ELEMENT_ID_FK: TableField<AcrossRepStatRecord, Int?> = createField(DSL.name("ELEMENT_ID_FK"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>KSL_DB.ACROSS_REP_STAT.SIM_RUN_ID_FK</code>.
     */
    val SIM_RUN_ID_FK: TableField<AcrossRepStatRecord, Int?> = createField(DSL.name("SIM_RUN_ID_FK"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>KSL_DB.ACROSS_REP_STAT.STAT_NAME</code>.
     */
    val STAT_NAME: TableField<AcrossRepStatRecord, String?> = createField(DSL.name("STAT_NAME"), SQLDataType.VARCHAR(510), this, "")

    /**
     * The column <code>KSL_DB.ACROSS_REP_STAT.STAT_COUNT</code>.
     */
    val STAT_COUNT: TableField<AcrossRepStatRecord, Double?> = createField(DSL.name("STAT_COUNT"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>KSL_DB.ACROSS_REP_STAT.AVERAGE</code>.
     */
    val AVERAGE: TableField<AcrossRepStatRecord, Double?> = createField(DSL.name("AVERAGE"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>KSL_DB.ACROSS_REP_STAT.STD_DEV</code>.
     */
    val STD_DEV: TableField<AcrossRepStatRecord, Double?> = createField(DSL.name("STD_DEV"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>KSL_DB.ACROSS_REP_STAT.STD_ERR</code>.
     */
    val STD_ERR: TableField<AcrossRepStatRecord, Double?> = createField(DSL.name("STD_ERR"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>KSL_DB.ACROSS_REP_STAT.HALF_WIDTH</code>.
     */
    val HALF_WIDTH: TableField<AcrossRepStatRecord, Double?> = createField(DSL.name("HALF_WIDTH"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>KSL_DB.ACROSS_REP_STAT.CONF_LEVEL</code>.
     */
    val CONF_LEVEL: TableField<AcrossRepStatRecord, Double?> = createField(DSL.name("CONF_LEVEL"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>KSL_DB.ACROSS_REP_STAT.MINIMUM</code>.
     */
    val MINIMUM: TableField<AcrossRepStatRecord, Double?> = createField(DSL.name("MINIMUM"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>KSL_DB.ACROSS_REP_STAT.MAXIMUM</code>.
     */
    val MAXIMUM: TableField<AcrossRepStatRecord, Double?> = createField(DSL.name("MAXIMUM"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>KSL_DB.ACROSS_REP_STAT.SUM_OF_OBS</code>.
     */
    val SUM_OF_OBS: TableField<AcrossRepStatRecord, Double?> = createField(DSL.name("SUM_OF_OBS"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>KSL_DB.ACROSS_REP_STAT.DEV_SSQ</code>.
     */
    val DEV_SSQ: TableField<AcrossRepStatRecord, Double?> = createField(DSL.name("DEV_SSQ"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>KSL_DB.ACROSS_REP_STAT.LAST_VALUE</code>.
     */
    val LAST_VALUE: TableField<AcrossRepStatRecord, Double?> = createField(DSL.name("LAST_VALUE"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>KSL_DB.ACROSS_REP_STAT.KURTOSIS</code>.
     */
    val KURTOSIS: TableField<AcrossRepStatRecord, Double?> = createField(DSL.name("KURTOSIS"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>KSL_DB.ACROSS_REP_STAT.SKEWNESS</code>.
     */
    val SKEWNESS: TableField<AcrossRepStatRecord, Double?> = createField(DSL.name("SKEWNESS"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>KSL_DB.ACROSS_REP_STAT.LAG1_COV</code>.
     */
    val LAG1_COV: TableField<AcrossRepStatRecord, Double?> = createField(DSL.name("LAG1_COV"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>KSL_DB.ACROSS_REP_STAT.LAG1_CORR</code>.
     */
    val LAG1_CORR: TableField<AcrossRepStatRecord, Double?> = createField(DSL.name("LAG1_CORR"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>KSL_DB.ACROSS_REP_STAT.VON_NEUMANN_LAG1_STAT</code>.
     */
    val VON_NEUMANN_LAG1_STAT: TableField<AcrossRepStatRecord, Double?> = createField(DSL.name("VON_NEUMANN_LAG1_STAT"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>KSL_DB.ACROSS_REP_STAT.NUM_MISSING_OBS</code>.
     */
    val NUM_MISSING_OBS: TableField<AcrossRepStatRecord, Double?> = createField(DSL.name("NUM_MISSING_OBS"), SQLDataType.DOUBLE, this, "")

    private constructor(alias: Name, aliased: Table<AcrossRepStatRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<AcrossRepStatRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>KSL_DB.ACROSS_REP_STAT</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>KSL_DB.ACROSS_REP_STAT</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>KSL_DB.ACROSS_REP_STAT</code> table reference
     */
    constructor(): this(DSL.name("ACROSS_REP_STAT"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, AcrossRepStatRecord>): this(Internal.createPathAlias(child, key), child, key, ACROSS_REP_STAT, null)
    override fun getSchema(): Schema? = if (aliased()) null else KslDb.KSL_DB
    override fun getIndexes(): List<Index> = listOf(ARS_ME_FK_INDEX)
    override fun getIdentity(): Identity<AcrossRepStatRecord, Int?> = super.getIdentity() as Identity<AcrossRepStatRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<AcrossRepStatRecord> = ksl.utilities.io.dbutil.ksldbjooq.keys.`SQL0000000106-06B1817D-0186-32BA-7CC1-00000B26C650`
    override fun getReferences(): List<ForeignKey<AcrossRepStatRecord, *>> = listOf(ARS_SIMRUN_FK)

    private lateinit var _simulationRun: SimulationRun

    /**
     * Get the implicit join path to the <code>KSL_DB.SIMULATION_RUN</code>
     * table.
     */
    fun simulationRun(): SimulationRun {
        if (!this::_simulationRun.isInitialized)
            _simulationRun = SimulationRun(this, ARS_SIMRUN_FK)

        return _simulationRun;
    }

    val simulationRun: SimulationRun
        get(): SimulationRun = simulationRun()
    override fun getChecks(): List<Check<AcrossRepStatRecord>> = listOf(
        Internal.createCheck(this, DSL.name("SQL0000000107-6f10c17e-0186-32ba-7cc1-00000b26c650"), "(STAT_COUNT >= 0)", true),
        Internal.createCheck(this, DSL.name("SQL0000000108-a770417f-0186-32ba-7cc1-00000b26c650"), "(STD_DEV >= 0)", true),
        Internal.createCheck(this, DSL.name("SQL0000000109-bfd00180-0186-32ba-7cc1-00000b26c650"), "(STD_ERR >= 0)", true),
        Internal.createCheck(this, DSL.name("SQL0000000110-c8300181-0186-32ba-7cc1-00000b26c650"), "(HALF_WIDTH >= 0)", true)
    )
    override fun `as`(alias: String): AcrossRepStat = AcrossRepStat(DSL.name(alias), this)
    override fun `as`(alias: Name): AcrossRepStat = AcrossRepStat(alias, this)
    override fun `as`(alias: Table<*>): AcrossRepStat = AcrossRepStat(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): AcrossRepStat = AcrossRepStat(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): AcrossRepStat = AcrossRepStat(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): AcrossRepStat = AcrossRepStat(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row21<Int?, Int?, Int?, String?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?> = super.fieldsRow() as Row21<Int?, Int?, Int?, String?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Int?, Int?, String?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Int?, Int?, String?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
