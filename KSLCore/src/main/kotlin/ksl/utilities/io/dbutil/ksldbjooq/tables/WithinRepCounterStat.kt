/*
 * This file is generated by jOOQ.
 */
package ksl.utilities.io.dbutil.ksldbjooq.tables


import java.util.function.Function

import kotlin.collections.List

import ksl.utilities.io.dbutil.ksldbjooq.KslDb
import ksl.utilities.io.dbutil.ksldbjooq.indexes.WRCS_ME_FK_INDEX
import ksl.utilities.io.dbutil.ksldbjooq.keys.WRCS_SIMRUN_FK
import ksl.utilities.io.dbutil.ksldbjooq.keys.WRCS_UNIQUE_ELEMENT_SIMRUN_REPNUM
import ksl.utilities.io.dbutil.ksldbjooq.tables.records.WithinRepCounterStatRecord

import org.jooq.Check
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class WithinRepCounterStat(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, WithinRepCounterStatRecord>?,
    aliased: Table<WithinRepCounterStatRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<WithinRepCounterStatRecord>(
    alias,
    KslDb.KSL_DB,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>KSL_DB.WITHIN_REP_COUNTER_STAT</code>
         */
        val WITHIN_REP_COUNTER_STAT: WithinRepCounterStat = WithinRepCounterStat()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<WithinRepCounterStatRecord> = WithinRepCounterStatRecord::class.java

    /**
     * The column <code>KSL_DB.WITHIN_REP_COUNTER_STAT.ID</code>.
     */
    val ID: TableField<WithinRepCounterStatRecord, Int?> = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>KSL_DB.WITHIN_REP_COUNTER_STAT.ELEMENT_ID_FK</code>.
     */
    val ELEMENT_ID_FK: TableField<WithinRepCounterStatRecord, Int?> = createField(DSL.name("ELEMENT_ID_FK"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>KSL_DB.WITHIN_REP_COUNTER_STAT.SIM_RUN_ID_FK</code>.
     */
    val SIM_RUN_ID_FK: TableField<WithinRepCounterStatRecord, Int?> = createField(DSL.name("SIM_RUN_ID_FK"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>KSL_DB.WITHIN_REP_COUNTER_STAT.REP_ID</code>.
     */
    val REP_ID: TableField<WithinRepCounterStatRecord, Int?> = createField(DSL.name("REP_ID"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>KSL_DB.WITHIN_REP_COUNTER_STAT.STAT_NAME</code>.
     */
    val STAT_NAME: TableField<WithinRepCounterStatRecord, String?> = createField(DSL.name("STAT_NAME"), SQLDataType.VARCHAR(510), this, "")

    /**
     * The column <code>KSL_DB.WITHIN_REP_COUNTER_STAT.LAST_VALUE</code>.
     */
    val LAST_VALUE: TableField<WithinRepCounterStatRecord, Double?> = createField(DSL.name("LAST_VALUE"), SQLDataType.DOUBLE, this, "")

    private constructor(alias: Name, aliased: Table<WithinRepCounterStatRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<WithinRepCounterStatRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>KSL_DB.WITHIN_REP_COUNTER_STAT</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>KSL_DB.WITHIN_REP_COUNTER_STAT</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>KSL_DB.WITHIN_REP_COUNTER_STAT</code> table reference
     */
    constructor(): this(DSL.name("WITHIN_REP_COUNTER_STAT"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, WithinRepCounterStatRecord>): this(Internal.createPathAlias(child, key), child, key, WITHIN_REP_COUNTER_STAT, null)
    override fun getSchema(): Schema? = if (aliased()) null else KslDb.KSL_DB
    override fun getIndexes(): List<Index> = listOf(WRCS_ME_FK_INDEX)
    override fun getIdentity(): Identity<WithinRepCounterStatRecord, Int?> = super.getIdentity() as Identity<WithinRepCounterStatRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<WithinRepCounterStatRecord> = ksl.utilities.io.dbutil.ksldbjooq.keys.`SQL0000000112-8FE48195-0186-32BA-7CC1-00000B26C650`
    override fun getUniqueKeys(): List<UniqueKey<WithinRepCounterStatRecord>> = listOf(WRCS_UNIQUE_ELEMENT_SIMRUN_REPNUM)
    override fun getReferences(): List<ForeignKey<WithinRepCounterStatRecord, *>> = listOf(WRCS_SIMRUN_FK)

    private lateinit var _simulationRun: SimulationRun

    /**
     * Get the implicit join path to the <code>KSL_DB.SIMULATION_RUN</code>
     * table.
     */
    fun simulationRun(): SimulationRun {
        if (!this::_simulationRun.isInitialized)
            _simulationRun = SimulationRun(this, WRCS_SIMRUN_FK)

        return _simulationRun;
    }

    val simulationRun: SimulationRun
        get(): SimulationRun = simulationRun()
    override fun getChecks(): List<Check<WithinRepCounterStatRecord>> = listOf(
        Internal.createCheck(this, DSL.name("SQL0000000113-b849c196-0186-32ba-7cc1-00000b26c650"), "(REP_ID >= 1)", true)
    )
    override fun `as`(alias: String): WithinRepCounterStat = WithinRepCounterStat(DSL.name(alias), this)
    override fun `as`(alias: Name): WithinRepCounterStat = WithinRepCounterStat(alias, this)
    override fun `as`(alias: Table<*>): WithinRepCounterStat = WithinRepCounterStat(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): WithinRepCounterStat = WithinRepCounterStat(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): WithinRepCounterStat = WithinRepCounterStat(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): WithinRepCounterStat = WithinRepCounterStat(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<Int?, Int?, Int?, Int?, String?, Double?> = super.fieldsRow() as Row6<Int?, Int?, Int?, Int?, String?, Double?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Int?, Int?, Int?, String?, Double?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Int?, Int?, Int?, String?, Double?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
