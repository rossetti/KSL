/*
 * This file is generated by jOOQ.
 */
package ksl.utilities.io.dbutil.ksldbjooq.tables.records


import ksl.utilities.io.dbutil.ksldbjooq.tables.WithinRepCounterStat

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class WithinRepCounterStatRecord() : UpdatableRecordImpl<WithinRepCounterStatRecord>(WithinRepCounterStat.WITHIN_REP_COUNTER_STAT), Record6<Int?, Int?, Int?, Int?, String?, Double?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var elementIdFk: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var simRunIdFk: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var repId: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var statName: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var lastValue: Double?
        set(value): Unit = set(5, value)
        get(): Double? = get(5) as Double?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<Int?, Int?, Int?, Int?, String?, Double?> = super.fieldsRow() as Row6<Int?, Int?, Int?, Int?, String?, Double?>
    override fun valuesRow(): Row6<Int?, Int?, Int?, Int?, String?, Double?> = super.valuesRow() as Row6<Int?, Int?, Int?, Int?, String?, Double?>
    override fun field1(): Field<Int?> = WithinRepCounterStat.WITHIN_REP_COUNTER_STAT.ID
    override fun field2(): Field<Int?> = WithinRepCounterStat.WITHIN_REP_COUNTER_STAT.ELEMENT_ID_FK
    override fun field3(): Field<Int?> = WithinRepCounterStat.WITHIN_REP_COUNTER_STAT.SIM_RUN_ID_FK
    override fun field4(): Field<Int?> = WithinRepCounterStat.WITHIN_REP_COUNTER_STAT.REP_ID
    override fun field5(): Field<String?> = WithinRepCounterStat.WITHIN_REP_COUNTER_STAT.STAT_NAME
    override fun field6(): Field<Double?> = WithinRepCounterStat.WITHIN_REP_COUNTER_STAT.LAST_VALUE
    override fun component1(): Int? = id
    override fun component2(): Int? = elementIdFk
    override fun component3(): Int? = simRunIdFk
    override fun component4(): Int? = repId
    override fun component5(): String? = statName
    override fun component6(): Double? = lastValue
    override fun value1(): Int? = id
    override fun value2(): Int? = elementIdFk
    override fun value3(): Int? = simRunIdFk
    override fun value4(): Int? = repId
    override fun value5(): String? = statName
    override fun value6(): Double? = lastValue

    override fun value1(value: Int?): WithinRepCounterStatRecord {
        this.id = value
        return this
    }

    override fun value2(value: Int?): WithinRepCounterStatRecord {
        this.elementIdFk = value
        return this
    }

    override fun value3(value: Int?): WithinRepCounterStatRecord {
        this.simRunIdFk = value
        return this
    }

    override fun value4(value: Int?): WithinRepCounterStatRecord {
        this.repId = value
        return this
    }

    override fun value5(value: String?): WithinRepCounterStatRecord {
        this.statName = value
        return this
    }

    override fun value6(value: Double?): WithinRepCounterStatRecord {
        this.lastValue = value
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: Int?, value4: Int?, value5: String?, value6: Double?): WithinRepCounterStatRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised WithinRepCounterStatRecord
     */
    constructor(id: Int? = null, elementIdFk: Int? = null, simRunIdFk: Int? = null, repId: Int? = null, statName: String? = null, lastValue: Double? = null): this() {
        this.id = id
        this.elementIdFk = elementIdFk
        this.simRunIdFk = simRunIdFk
        this.repId = repId
        this.statName = statName
        this.lastValue = lastValue
    }
}
