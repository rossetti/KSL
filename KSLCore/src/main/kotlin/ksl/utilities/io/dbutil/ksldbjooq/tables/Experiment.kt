/*
 * This file is generated by jOOQ.
 */
package ksl.utilities.io.dbutil.ksldbjooq.tables


import java.util.function.Function

import kotlin.collections.List

import ksl.utilities.io.dbutil.ksldbjooq.KslDb
import ksl.utilities.io.dbutil.ksldbjooq.keys.EXP_NAME_UNIQUE
import ksl.utilities.io.dbutil.ksldbjooq.tables.records.ExperimentRecord

import org.jooq.Check
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row15
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Experiment(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ExperimentRecord>?,
    aliased: Table<ExperimentRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ExperimentRecord>(
    alias,
    KslDb.KSL_DB,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>KSL_DB.EXPERIMENT</code>
         */
        val EXPERIMENT: Experiment = Experiment()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ExperimentRecord> = ExperimentRecord::class.java

    /**
     * The column <code>KSL_DB.EXPERIMENT.EXP_ID</code>.
     */
    val EXP_ID: TableField<ExperimentRecord, Int?> = createField(DSL.name("EXP_ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>KSL_DB.EXPERIMENT.SIM_NAME</code>.
     */
    val SIM_NAME: TableField<ExperimentRecord, String?> = createField(DSL.name("SIM_NAME"), SQLDataType.VARCHAR(510).nullable(false), this, "")

    /**
     * The column <code>KSL_DB.EXPERIMENT.MODEL_NAME</code>.
     */
    val MODEL_NAME: TableField<ExperimentRecord, String?> = createField(DSL.name("MODEL_NAME"), SQLDataType.VARCHAR(510).nullable(false), this, "")

    /**
     * The column <code>KSL_DB.EXPERIMENT.EXP_NAME</code>.
     */
    val EXP_NAME: TableField<ExperimentRecord, String?> = createField(DSL.name("EXP_NAME"), SQLDataType.VARCHAR(510).nullable(false), this, "")

    /**
     * The column <code>KSL_DB.EXPERIMENT.NUM_REPS</code>.
     */
    val NUM_REPS: TableField<ExperimentRecord, Int?> = createField(DSL.name("NUM_REPS"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>KSL_DB.EXPERIMENT.IS_CHUNKED</code>.
     */
    val IS_CHUNKED: TableField<ExperimentRecord, Boolean?> = createField(DSL.name("IS_CHUNKED"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>KSL_DB.EXPERIMENT.LENGTH_OF_REP</code>.
     */
    val LENGTH_OF_REP: TableField<ExperimentRecord, Double?> = createField(DSL.name("LENGTH_OF_REP"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>KSL_DB.EXPERIMENT.LENGTH_OF_WARM_UP</code>.
     */
    val LENGTH_OF_WARM_UP: TableField<ExperimentRecord, Double?> = createField(DSL.name("LENGTH_OF_WARM_UP"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>KSL_DB.EXPERIMENT.REP_ALLOWED_EXEC_TIME</code>.
     */
    val REP_ALLOWED_EXEC_TIME: TableField<ExperimentRecord, Long?> = createField(DSL.name("REP_ALLOWED_EXEC_TIME"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>KSL_DB.EXPERIMENT.REP_INIT_OPTION</code>.
     */
    val REP_INIT_OPTION: TableField<ExperimentRecord, Boolean?> = createField(DSL.name("REP_INIT_OPTION"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>KSL_DB.EXPERIMENT.RESET_START_STREAM_OPTION</code>.
     */
    val RESET_START_STREAM_OPTION: TableField<ExperimentRecord, Boolean?> = createField(DSL.name("RESET_START_STREAM_OPTION"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>KSL_DB.EXPERIMENT.ANTITHETIC_OPTION</code>.
     */
    val ANTITHETIC_OPTION: TableField<ExperimentRecord, Boolean?> = createField(DSL.name("ANTITHETIC_OPTION"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>KSL_DB.EXPERIMENT.ADV_NEXT_SUB_STREAM_OPTION</code>.
     */
    val ADV_NEXT_SUB_STREAM_OPTION: TableField<ExperimentRecord, Boolean?> = createField(DSL.name("ADV_NEXT_SUB_STREAM_OPTION"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>KSL_DB.EXPERIMENT.NUM_STREAM_ADVANCES</code>.
     */
    val NUM_STREAM_ADVANCES: TableField<ExperimentRecord, Int?> = createField(DSL.name("NUM_STREAM_ADVANCES"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>KSL_DB.EXPERIMENT.GC_AFTER_REP_OPTION</code>.
     */
    val GC_AFTER_REP_OPTION: TableField<ExperimentRecord, Boolean?> = createField(DSL.name("GC_AFTER_REP_OPTION"), SQLDataType.BOOLEAN.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ExperimentRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ExperimentRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>KSL_DB.EXPERIMENT</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>KSL_DB.EXPERIMENT</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>KSL_DB.EXPERIMENT</code> table reference
     */
    constructor(): this(DSL.name("EXPERIMENT"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ExperimentRecord>): this(Internal.createPathAlias(child, key), child, key, EXPERIMENT, null)
    override fun getSchema(): Schema? = if (aliased()) null else KslDb.KSL_DB
    override fun getIdentity(): Identity<ExperimentRecord, Int?> = super.getIdentity() as Identity<ExperimentRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<ExperimentRecord> = ksl.utilities.io.dbutil.ksldbjooq.keys.`SQL0000000081-7FA040FF-0186-32BA-7CC1-00000B26C650`
    override fun getUniqueKeys(): List<UniqueKey<ExperimentRecord>> = listOf(EXP_NAME_UNIQUE)
    override fun getChecks(): List<Check<ExperimentRecord>> = listOf(
        Internal.createCheck(this, DSL.name("SQL0000000082-97e00100-0186-32ba-7cc1-00000b26c650"), "(NUM_REPS >= 1)", true)
    )
    override fun `as`(alias: String): Experiment = Experiment(DSL.name(alias), this)
    override fun `as`(alias: Name): Experiment = Experiment(alias, this)
    override fun `as`(alias: Table<*>): Experiment = Experiment(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Experiment = Experiment(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Experiment = Experiment(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Experiment = Experiment(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row15<Int?, String?, String?, String?, Int?, Boolean?, Double?, Double?, Long?, Boolean?, Boolean?, Boolean?, Boolean?, Int?, Boolean?> = super.fieldsRow() as Row15<Int?, String?, String?, String?, Int?, Boolean?, Double?, Double?, Long?, Boolean?, Boolean?, Boolean?, Boolean?, Int?, Boolean?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, String?, String?, String?, Int?, Boolean?, Double?, Double?, Long?, Boolean?, Boolean?, Boolean?, Boolean?, Int?, Boolean?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, String?, String?, String?, Int?, Boolean?, Double?, Double?, Long?, Boolean?, Boolean?, Boolean?, Boolean?, Int?, Boolean?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
