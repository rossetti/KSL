/*
 * This file is generated by jOOQ.
 */
package ksl.utilities.io.dbutil.ksldbjooq.tables


import java.util.function.Function

import kotlin.collections.List

import ksl.utilities.io.dbutil.ksldbjooq.KslDb
import ksl.utilities.io.dbutil.ksldbjooq.keys.RV_PARAM_EXP_ID_FK
import ksl.utilities.io.dbutil.ksldbjooq.keys.RV_PARAM_MODEL_ELEMENT_FK
import ksl.utilities.io.dbutil.ksldbjooq.tables.records.RvParameterRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RvParameter(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, RvParameterRecord>?,
    aliased: Table<RvParameterRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<RvParameterRecord>(
    alias,
    KslDb.KSL_DB,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>KSL_DB.RV_PARAMETER</code>
         */
        val RV_PARAMETER: RvParameter = RvParameter()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RvParameterRecord> = RvParameterRecord::class.java

    /**
     * The column <code>KSL_DB.RV_PARAMETER.RV_PARAM_ID</code>.
     */
    val RV_PARAM_ID: TableField<RvParameterRecord, Int?> = createField(DSL.name("RV_PARAM_ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>KSL_DB.RV_PARAMETER.EXP_ID_FK</code>.
     */
    val EXP_ID_FK: TableField<RvParameterRecord, Int?> = createField(DSL.name("EXP_ID_FK"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>KSL_DB.RV_PARAMETER.ELEMENT_ID_FK</code>.
     */
    val ELEMENT_ID_FK: TableField<RvParameterRecord, Int?> = createField(DSL.name("ELEMENT_ID_FK"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>KSL_DB.RV_PARAMETER.CLASS_NAME</code>.
     */
    val CLASS_NAME: TableField<RvParameterRecord, String?> = createField(DSL.name("CLASS_NAME"), SQLDataType.VARCHAR(510).nullable(false), this, "")

    /**
     * The column <code>KSL_DB.RV_PARAMETER.DATA_TYPE</code>.
     */
    val DATA_TYPE: TableField<RvParameterRecord, String?> = createField(DSL.name("DATA_TYPE"), SQLDataType.VARCHAR(12).nullable(false), this, "")

    /**
     * The column <code>KSL_DB.RV_PARAMETER.RV_NAME</code>.
     */
    val RV_NAME: TableField<RvParameterRecord, String?> = createField(DSL.name("RV_NAME"), SQLDataType.VARCHAR(510).nullable(false), this, "")

    /**
     * The column <code>KSL_DB.RV_PARAMETER.PARAM_NAME</code>.
     */
    val PARAM_NAME: TableField<RvParameterRecord, String?> = createField(DSL.name("PARAM_NAME"), SQLDataType.VARCHAR(510).nullable(false), this, "")

    /**
     * The column <code>KSL_DB.RV_PARAMETER.PARAM_VALUE</code>.
     */
    val PARAM_VALUE: TableField<RvParameterRecord, Double?> = createField(DSL.name("PARAM_VALUE"), SQLDataType.DOUBLE.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<RvParameterRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<RvParameterRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>KSL_DB.RV_PARAMETER</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>KSL_DB.RV_PARAMETER</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>KSL_DB.RV_PARAMETER</code> table reference
     */
    constructor(): this(DSL.name("RV_PARAMETER"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, RvParameterRecord>): this(Internal.createPathAlias(child, key), child, key, RV_PARAMETER, null)
    override fun getSchema(): Schema? = if (aliased()) null else KslDb.KSL_DB
    override fun getIdentity(): Identity<RvParameterRecord, Int?> = super.getIdentity() as Identity<RvParameterRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<RvParameterRecord> = ksl.utilities.io.dbutil.ksldbjooq.keys.`SQL0000000098-3F9E4152-0186-32BA-7CC1-00000B26C650`
    override fun getReferences(): List<ForeignKey<RvParameterRecord, *>> = listOf(RV_PARAM_EXP_ID_FK, RV_PARAM_MODEL_ELEMENT_FK)

    private lateinit var _experiment: Experiment
    private lateinit var _modelElement: ModelElement

    /**
     * Get the implicit join path to the <code>KSL_DB.EXPERIMENT</code> table.
     */
    fun experiment(): Experiment {
        if (!this::_experiment.isInitialized)
            _experiment = Experiment(this, RV_PARAM_EXP_ID_FK)

        return _experiment;
    }

    val experiment: Experiment
        get(): Experiment = experiment()

    /**
     * Get the implicit join path to the <code>KSL_DB.MODEL_ELEMENT</code>
     * table.
     */
    fun modelElement(): ModelElement {
        if (!this::_modelElement.isInitialized)
            _modelElement = ModelElement(this, RV_PARAM_MODEL_ELEMENT_FK)

        return _modelElement;
    }

    val modelElement: ModelElement
        get(): ModelElement = modelElement()
    override fun `as`(alias: String): RvParameter = RvParameter(DSL.name(alias), this)
    override fun `as`(alias: Name): RvParameter = RvParameter(alias, this)
    override fun `as`(alias: Table<*>): RvParameter = RvParameter(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): RvParameter = RvParameter(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): RvParameter = RvParameter(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): RvParameter = RvParameter(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<Int?, Int?, Int?, String?, String?, String?, String?, Double?> = super.fieldsRow() as Row8<Int?, Int?, Int?, String?, String?, String?, String?, Double?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Int?, Int?, String?, String?, String?, String?, Double?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Int?, Int?, String?, String?, String?, String?, Double?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
