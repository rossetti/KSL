/*
 * This file is generated by jOOQ.
 */
package ksl.utilities.io.dbutil.ksldbjooq.tables


import java.util.function.Function

import ksl.utilities.io.dbutil.ksldbjooq.KslDb
import ksl.utilities.io.dbutil.ksldbjooq.tables.records.WithinRepResponseViewRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class WithinRepResponseView(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, WithinRepResponseViewRecord>?,
    aliased: Table<WithinRepResponseViewRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<WithinRepResponseViewRecord>(
    alias,
    KslDb.KSL_DB,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("CREATE VIEW KSL_DB.WITHIN_REP_RESPONSE_VIEW (EXP_NAME, RUN_NAME, NUM_REPS, START_REP_ID, LAST_REP_ID, STAT_NAME, REP_ID, AVERAGE) AS SELECT EXP_NAME, RUN_NAME, KSL_DB.EXPERIMENT.NUM_REPS, START_REP_ID, LAST_REP_ID, STAT_NAME, REP_ID, AVERAGE FROM KSL_DB.EXPERIMENT, KSL_DB.SIMULATION_RUN, KSL_DB.MODEL_ELEMENT, KSL_DB.WITHIN_REP_STAT WHERE KSL_DB.EXPERIMENT.EXP_ID = KSL_DB.SIMULATION_RUN.EXP_ID_FK AND KSL_DB.SIMULATION_RUN.RUN_ID = KSL_DB.WITHIN_REP_STAT.SIM_RUN_ID_FK AND KSL_DB.EXPERIMENT.EXP_ID = KSL_DB.MODEL_ELEMENT.EXP_ID_FK AND KSL_DB.MODEL_ELEMENT.ELEMENT_ID = KSL_DB.WITHIN_REP_STAT.ELEMENT_ID_FK AND KSL_DB.MODEL_ELEMENT.ELEMENT_NAME = KSL_DB.WITHIN_REP_STAT.STAT_NAME ORDER BY EXP_NAME, RUN_NAME, KSL_DB.EXPERIMENT.NUM_REPS, START_REP_ID, LAST_REP_ID, STAT_NAME, REP_ID")
) {
    companion object {

        /**
         * The reference instance of
         * <code>KSL_DB.WITHIN_REP_RESPONSE_VIEW</code>
         */
        val WITHIN_REP_RESPONSE_VIEW: WithinRepResponseView = WithinRepResponseView()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<WithinRepResponseViewRecord> = WithinRepResponseViewRecord::class.java

    /**
     * The column <code>KSL_DB.WITHIN_REP_RESPONSE_VIEW.EXP_NAME</code>.
     */
    val EXP_NAME: TableField<WithinRepResponseViewRecord, String?> = createField(DSL.name("EXP_NAME"), SQLDataType.VARCHAR(510).nullable(false), this, "")

    /**
     * The column <code>KSL_DB.WITHIN_REP_RESPONSE_VIEW.RUN_NAME</code>.
     */
    val RUN_NAME: TableField<WithinRepResponseViewRecord, String?> = createField(DSL.name("RUN_NAME"), SQLDataType.VARCHAR(510).nullable(false), this, "")

    /**
     * The column <code>KSL_DB.WITHIN_REP_RESPONSE_VIEW.NUM_REPS</code>.
     */
    val NUM_REPS: TableField<WithinRepResponseViewRecord, Int?> = createField(DSL.name("NUM_REPS"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>KSL_DB.WITHIN_REP_RESPONSE_VIEW.START_REP_ID</code>.
     */
    val START_REP_ID: TableField<WithinRepResponseViewRecord, Int?> = createField(DSL.name("START_REP_ID"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>KSL_DB.WITHIN_REP_RESPONSE_VIEW.LAST_REP_ID</code>.
     */
    val LAST_REP_ID: TableField<WithinRepResponseViewRecord, Int?> = createField(DSL.name("LAST_REP_ID"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>KSL_DB.WITHIN_REP_RESPONSE_VIEW.STAT_NAME</code>.
     */
    val STAT_NAME: TableField<WithinRepResponseViewRecord, String?> = createField(DSL.name("STAT_NAME"), SQLDataType.VARCHAR(510), this, "")

    /**
     * The column <code>KSL_DB.WITHIN_REP_RESPONSE_VIEW.REP_ID</code>.
     */
    val REP_ID: TableField<WithinRepResponseViewRecord, Int?> = createField(DSL.name("REP_ID"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>KSL_DB.WITHIN_REP_RESPONSE_VIEW.AVERAGE</code>.
     */
    val AVERAGE: TableField<WithinRepResponseViewRecord, Double?> = createField(DSL.name("AVERAGE"), SQLDataType.DOUBLE, this, "")

    private constructor(alias: Name, aliased: Table<WithinRepResponseViewRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<WithinRepResponseViewRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>KSL_DB.WITHIN_REP_RESPONSE_VIEW</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>KSL_DB.WITHIN_REP_RESPONSE_VIEW</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>KSL_DB.WITHIN_REP_RESPONSE_VIEW</code> table reference
     */
    constructor(): this(DSL.name("WITHIN_REP_RESPONSE_VIEW"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, WithinRepResponseViewRecord>): this(Internal.createPathAlias(child, key), child, key, WITHIN_REP_RESPONSE_VIEW, null)
    override fun getSchema(): Schema? = if (aliased()) null else KslDb.KSL_DB
    override fun `as`(alias: String): WithinRepResponseView = WithinRepResponseView(DSL.name(alias), this)
    override fun `as`(alias: Name): WithinRepResponseView = WithinRepResponseView(alias, this)
    override fun `as`(alias: Table<*>): WithinRepResponseView = WithinRepResponseView(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): WithinRepResponseView = WithinRepResponseView(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): WithinRepResponseView = WithinRepResponseView(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): WithinRepResponseView = WithinRepResponseView(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<String?, String?, Int?, Int?, Int?, String?, Int?, Double?> = super.fieldsRow() as Row8<String?, String?, Int?, Int?, Int?, String?, Int?, Double?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, String?, Int?, Int?, Int?, String?, Int?, Double?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, String?, Int?, Int?, Int?, String?, Int?, Double?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
