/*
 * This file is generated by jOOQ.
 */
package ksl.utilities.io.dbutil.ksldbjooq.tables


import java.util.function.Function

import ksl.utilities.io.dbutil.ksldbjooq.KslDb
import ksl.utilities.io.dbutil.ksldbjooq.tables.records.PwDiffWithinRepViewRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row9
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PwDiffWithinRepView(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, PwDiffWithinRepViewRecord>?,
    aliased: Table<PwDiffWithinRepViewRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<PwDiffWithinRepViewRecord>(
    alias,
    KslDb.KSL_DB,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view KSL_DB.PW_DIFF_WITHIN_REP_VIEW as select EA.SIM_NAME, A.STAT_NAME, A.REP_ID, A.EXP_NAME                                      as A_EXP_NAME, A.REP_VALUE                                     as A_VALUE, B.EXP_NAME                                      as B_EXP_NAME, B.REP_VALUE                                     as B_VALUE, '(' || A.EXP_NAME || ' - ' || B.EXP_NAME || ')' as DIFF_NAME, (A.REP_VALUE - B.REP_VALUE)                     as A_MINUS_B from KSL_DB.WITHIN_REP_VIEW as A, KSL_DB.WITHIN_REP_VIEW as B, KSL_DB.EXPERIMENT as EA, KSL_DB.EXPERIMENT as EB where EA.EXP_NAME = A.EXP_NAME and EB.EXP_NAME = B.EXP_NAME and A.NUM_REPS = B.NUM_REPS and A.STAT_NAME = B.STAT_NAME and A.REP_ID = B.REP_ID and EA.EXP_ID > EB.EXP_ID")
) {
    companion object {

        /**
         * The reference instance of <code>KSL_DB.PW_DIFF_WITHIN_REP_VIEW</code>
         */
        val PW_DIFF_WITHIN_REP_VIEW: PwDiffWithinRepView = PwDiffWithinRepView()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PwDiffWithinRepViewRecord> = PwDiffWithinRepViewRecord::class.java

    /**
     * The column <code>KSL_DB.PW_DIFF_WITHIN_REP_VIEW.SIM_NAME</code>.
     */
    val SIM_NAME: TableField<PwDiffWithinRepViewRecord, String?> = createField(DSL.name("SIM_NAME"), SQLDataType.VARCHAR(510).nullable(false), this, "")

    /**
     * The column <code>KSL_DB.PW_DIFF_WITHIN_REP_VIEW.STAT_NAME</code>.
     */
    val STAT_NAME: TableField<PwDiffWithinRepViewRecord, String?> = createField(DSL.name("STAT_NAME"), SQLDataType.VARCHAR(510), this, "")

    /**
     * The column <code>KSL_DB.PW_DIFF_WITHIN_REP_VIEW.REP_ID</code>.
     */
    val REP_ID: TableField<PwDiffWithinRepViewRecord, Int?> = createField(DSL.name("REP_ID"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>KSL_DB.PW_DIFF_WITHIN_REP_VIEW.A_EXP_NAME</code>.
     */
    val A_EXP_NAME: TableField<PwDiffWithinRepViewRecord, String?> = createField(DSL.name("A_EXP_NAME"), SQLDataType.VARCHAR(510).nullable(false), this, "")

    /**
     * The column <code>KSL_DB.PW_DIFF_WITHIN_REP_VIEW.A_VALUE</code>.
     */
    val A_VALUE: TableField<PwDiffWithinRepViewRecord, Double?> = createField(DSL.name("A_VALUE"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>KSL_DB.PW_DIFF_WITHIN_REP_VIEW.B_EXP_NAME</code>.
     */
    val B_EXP_NAME: TableField<PwDiffWithinRepViewRecord, String?> = createField(DSL.name("B_EXP_NAME"), SQLDataType.VARCHAR(510).nullable(false), this, "")

    /**
     * The column <code>KSL_DB.PW_DIFF_WITHIN_REP_VIEW.B_VALUE</code>.
     */
    val B_VALUE: TableField<PwDiffWithinRepViewRecord, Double?> = createField(DSL.name("B_VALUE"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>KSL_DB.PW_DIFF_WITHIN_REP_VIEW.DIFF_NAME</code>.
     */
    val DIFF_NAME: TableField<PwDiffWithinRepViewRecord, String?> = createField(DSL.name("DIFF_NAME"), SQLDataType.VARCHAR(1025).nullable(false), this, "")

    /**
     * The column <code>KSL_DB.PW_DIFF_WITHIN_REP_VIEW.A_MINUS_B</code>.
     */
    val A_MINUS_B: TableField<PwDiffWithinRepViewRecord, Double?> = createField(DSL.name("A_MINUS_B"), SQLDataType.DOUBLE, this, "")

    private constructor(alias: Name, aliased: Table<PwDiffWithinRepViewRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<PwDiffWithinRepViewRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>KSL_DB.PW_DIFF_WITHIN_REP_VIEW</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>KSL_DB.PW_DIFF_WITHIN_REP_VIEW</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>KSL_DB.PW_DIFF_WITHIN_REP_VIEW</code> table reference
     */
    constructor(): this(DSL.name("PW_DIFF_WITHIN_REP_VIEW"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, PwDiffWithinRepViewRecord>): this(Internal.createPathAlias(child, key), child, key, PW_DIFF_WITHIN_REP_VIEW, null)
    override fun getSchema(): Schema? = if (aliased()) null else KslDb.KSL_DB
    override fun `as`(alias: String): PwDiffWithinRepView = PwDiffWithinRepView(DSL.name(alias), this)
    override fun `as`(alias: Name): PwDiffWithinRepView = PwDiffWithinRepView(alias, this)
    override fun `as`(alias: Table<*>): PwDiffWithinRepView = PwDiffWithinRepView(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PwDiffWithinRepView = PwDiffWithinRepView(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PwDiffWithinRepView = PwDiffWithinRepView(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PwDiffWithinRepView = PwDiffWithinRepView(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row9<String?, String?, Int?, String?, Double?, String?, Double?, String?, Double?> = super.fieldsRow() as Row9<String?, String?, Int?, String?, Double?, String?, Double?, String?, Double?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, String?, Int?, String?, Double?, String?, Double?, String?, Double?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, String?, Int?, String?, Double?, String?, Double?, String?, Double?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
