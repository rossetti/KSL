/*
 * This file is generated by jOOQ.
 */
package ksl.utilities.io.dbutil.ksldbjooq.tables


import java.time.LocalDateTime
import java.util.function.Function

import kotlin.collections.List

import ksl.utilities.io.dbutil.ksldbjooq.KslDb
import ksl.utilities.io.dbutil.ksldbjooq.keys.SR_EXP_ID_FK
import ksl.utilities.io.dbutil.ksldbjooq.keys.SR_NAME_EXP_UNIQUE
import ksl.utilities.io.dbutil.ksldbjooq.tables.records.SimulationRunRecord

import org.jooq.Check
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row9
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SimulationRun(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, SimulationRunRecord>?,
    aliased: Table<SimulationRunRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<SimulationRunRecord>(
    alias,
    KslDb.KSL_DB,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>KSL_DB.SIMULATION_RUN</code>
         */
        val SIMULATION_RUN: SimulationRun = SimulationRun()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SimulationRunRecord> = SimulationRunRecord::class.java

    /**
     * The column <code>KSL_DB.SIMULATION_RUN.RUN_ID</code>.
     */
    val RUN_ID: TableField<SimulationRunRecord, Int?> = createField(DSL.name("RUN_ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>KSL_DB.SIMULATION_RUN.EXP_ID_FK</code>.
     */
    val EXP_ID_FK: TableField<SimulationRunRecord, Int?> = createField(DSL.name("EXP_ID_FK"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>KSL_DB.SIMULATION_RUN.RUN_NAME</code>.
     */
    val RUN_NAME: TableField<SimulationRunRecord, String?> = createField(DSL.name("RUN_NAME"), SQLDataType.VARCHAR(510).nullable(false), this, "")

    /**
     * The column <code>KSL_DB.SIMULATION_RUN.NUM_REPS</code>.
     */
    val NUM_REPS: TableField<SimulationRunRecord, Int?> = createField(DSL.name("NUM_REPS"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>KSL_DB.SIMULATION_RUN.START_REP_ID</code>.
     */
    val START_REP_ID: TableField<SimulationRunRecord, Int?> = createField(DSL.name("START_REP_ID"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>KSL_DB.SIMULATION_RUN.LAST_REP_ID</code>.
     */
    val LAST_REP_ID: TableField<SimulationRunRecord, Int?> = createField(DSL.name("LAST_REP_ID"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>KSL_DB.SIMULATION_RUN.RUN_START_TIME_STAMP</code>.
     */
    val RUN_START_TIME_STAMP: TableField<SimulationRunRecord, LocalDateTime?> = createField(DSL.name("RUN_START_TIME_STAMP"), SQLDataType.LOCALDATETIME(9), this, "")

    /**
     * The column <code>KSL_DB.SIMULATION_RUN.RUN_END_TIME_STAMP</code>.
     */
    val RUN_END_TIME_STAMP: TableField<SimulationRunRecord, LocalDateTime?> = createField(DSL.name("RUN_END_TIME_STAMP"), SQLDataType.LOCALDATETIME(9), this, "")

    /**
     * The column <code>KSL_DB.SIMULATION_RUN.RUN_ERROR_MSG</code>.
     */
    val RUN_ERROR_MSG: TableField<SimulationRunRecord, String?> = createField(DSL.name("RUN_ERROR_MSG"), SQLDataType.VARCHAR(510), this, "")

    private constructor(alias: Name, aliased: Table<SimulationRunRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<SimulationRunRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>KSL_DB.SIMULATION_RUN</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>KSL_DB.SIMULATION_RUN</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>KSL_DB.SIMULATION_RUN</code> table reference
     */
    constructor(): this(DSL.name("SIMULATION_RUN"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, SimulationRunRecord>): this(Internal.createPathAlias(child, key), child, key, SIMULATION_RUN, null)
    override fun getSchema(): Schema? = if (aliased()) null else KslDb.KSL_DB
    override fun getIdentity(): Identity<SimulationRunRecord, Int?> = super.getIdentity() as Identity<SimulationRunRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<SimulationRunRecord> = ksl.utilities.io.dbutil.ksldbjooq.keys.`SQL0000000084-CB76C10E-0186-32BA-7CC1-00000B26C650`
    override fun getUniqueKeys(): List<UniqueKey<SimulationRunRecord>> = listOf(SR_NAME_EXP_UNIQUE)
    override fun getReferences(): List<ForeignKey<SimulationRunRecord, *>> = listOf(SR_EXP_ID_FK)

    private lateinit var _experiment: Experiment

    /**
     * Get the implicit join path to the <code>KSL_DB.EXPERIMENT</code> table.
     */
    fun experiment(): Experiment {
        if (!this::_experiment.isInitialized)
            _experiment = Experiment(this, SR_EXP_ID_FK)

        return _experiment;
    }

    val experiment: Experiment
        get(): Experiment = experiment()
    override fun getChecks(): List<Check<SimulationRunRecord>> = listOf(
        Internal.createCheck(this, DSL.name("SQL0000000085-83ba410f-0186-32ba-7cc1-00000b26c650"), "(NUM_REPS >= 1)", true),
        Internal.createCheck(this, DSL.name("SQL0000000086-1bfe0110-0186-32ba-7cc1-00000b26c650"), "(1 <= START_REP_ID)", true),
        Internal.createCheck(this, DSL.name("SQL0000000087-a4420111-0186-32ba-7cc1-00000b26c650"), "(1 <= LAST_REP_ID)", true)
    )
    override fun `as`(alias: String): SimulationRun = SimulationRun(DSL.name(alias), this)
    override fun `as`(alias: Name): SimulationRun = SimulationRun(alias, this)
    override fun `as`(alias: Table<*>): SimulationRun = SimulationRun(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SimulationRun = SimulationRun(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SimulationRun = SimulationRun(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): SimulationRun = SimulationRun(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row9<Int?, Int?, String?, Int?, Int?, Int?, LocalDateTime?, LocalDateTime?, String?> = super.fieldsRow() as Row9<Int?, Int?, String?, Int?, Int?, Int?, LocalDateTime?, LocalDateTime?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Int?, String?, Int?, Int?, Int?, LocalDateTime?, LocalDateTime?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Int?, String?, Int?, Int?, Int?, LocalDateTime?, LocalDateTime?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
