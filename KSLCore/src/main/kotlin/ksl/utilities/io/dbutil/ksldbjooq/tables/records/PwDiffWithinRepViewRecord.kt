/*
 * This file is generated by jOOQ.
 */
package ksl.utilities.io.dbutil.ksldbjooq.tables.records


import ksl.utilities.io.dbutil.ksldbjooq.tables.PwDiffWithinRepView

import org.jooq.Field
import org.jooq.Record9
import org.jooq.Row9
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PwDiffWithinRepViewRecord() : TableRecordImpl<PwDiffWithinRepViewRecord>(PwDiffWithinRepView.PW_DIFF_WITHIN_REP_VIEW), Record9<String?, String?, Int?, String?, Double?, String?, Double?, String?, Double?> {

    open var simName: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var statName: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var repId: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var aExpName: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var aValue: Double?
        set(value): Unit = set(4, value)
        get(): Double? = get(4) as Double?

    open var bExpName: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var bValue: Double?
        set(value): Unit = set(6, value)
        get(): Double? = get(6) as Double?

    open var diffName: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open var aMinusB: Double?
        set(value): Unit = set(8, value)
        get(): Double? = get(8) as Double?

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row9<String?, String?, Int?, String?, Double?, String?, Double?, String?, Double?> = super.fieldsRow() as Row9<String?, String?, Int?, String?, Double?, String?, Double?, String?, Double?>
    override fun valuesRow(): Row9<String?, String?, Int?, String?, Double?, String?, Double?, String?, Double?> = super.valuesRow() as Row9<String?, String?, Int?, String?, Double?, String?, Double?, String?, Double?>
    override fun field1(): Field<String?> = PwDiffWithinRepView.PW_DIFF_WITHIN_REP_VIEW.SIM_NAME
    override fun field2(): Field<String?> = PwDiffWithinRepView.PW_DIFF_WITHIN_REP_VIEW.STAT_NAME
    override fun field3(): Field<Int?> = PwDiffWithinRepView.PW_DIFF_WITHIN_REP_VIEW.REP_ID
    override fun field4(): Field<String?> = PwDiffWithinRepView.PW_DIFF_WITHIN_REP_VIEW.A_EXP_NAME
    override fun field5(): Field<Double?> = PwDiffWithinRepView.PW_DIFF_WITHIN_REP_VIEW.A_VALUE
    override fun field6(): Field<String?> = PwDiffWithinRepView.PW_DIFF_WITHIN_REP_VIEW.B_EXP_NAME
    override fun field7(): Field<Double?> = PwDiffWithinRepView.PW_DIFF_WITHIN_REP_VIEW.B_VALUE
    override fun field8(): Field<String?> = PwDiffWithinRepView.PW_DIFF_WITHIN_REP_VIEW.DIFF_NAME
    override fun field9(): Field<Double?> = PwDiffWithinRepView.PW_DIFF_WITHIN_REP_VIEW.A_MINUS_B
    override fun component1(): String? = simName
    override fun component2(): String? = statName
    override fun component3(): Int? = repId
    override fun component4(): String? = aExpName
    override fun component5(): Double? = aValue
    override fun component6(): String? = bExpName
    override fun component7(): Double? = bValue
    override fun component8(): String? = diffName
    override fun component9(): Double? = aMinusB
    override fun value1(): String? = simName
    override fun value2(): String? = statName
    override fun value3(): Int? = repId
    override fun value4(): String? = aExpName
    override fun value5(): Double? = aValue
    override fun value6(): String? = bExpName
    override fun value7(): Double? = bValue
    override fun value8(): String? = diffName
    override fun value9(): Double? = aMinusB

    override fun value1(value: String?): PwDiffWithinRepViewRecord {
        this.simName = value
        return this
    }

    override fun value2(value: String?): PwDiffWithinRepViewRecord {
        this.statName = value
        return this
    }

    override fun value3(value: Int?): PwDiffWithinRepViewRecord {
        this.repId = value
        return this
    }

    override fun value4(value: String?): PwDiffWithinRepViewRecord {
        this.aExpName = value
        return this
    }

    override fun value5(value: Double?): PwDiffWithinRepViewRecord {
        this.aValue = value
        return this
    }

    override fun value6(value: String?): PwDiffWithinRepViewRecord {
        this.bExpName = value
        return this
    }

    override fun value7(value: Double?): PwDiffWithinRepViewRecord {
        this.bValue = value
        return this
    }

    override fun value8(value: String?): PwDiffWithinRepViewRecord {
        this.diffName = value
        return this
    }

    override fun value9(value: Double?): PwDiffWithinRepViewRecord {
        this.aMinusB = value
        return this
    }

    override fun values(value1: String?, value2: String?, value3: Int?, value4: String?, value5: Double?, value6: String?, value7: Double?, value8: String?, value9: Double?): PwDiffWithinRepViewRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        return this
    }

    /**
     * Create a detached, initialised PwDiffWithinRepViewRecord
     */
    constructor(simName: String? = null, statName: String? = null, repId: Int? = null, aExpName: String? = null, aValue: Double? = null, bExpName: String? = null, bValue: Double? = null, diffName: String? = null, aMinusB: Double? = null): this() {
        this.simName = simName
        this.statName = statName
        this.repId = repId
        this.aExpName = aExpName
        this.aValue = aValue
        this.bExpName = bExpName
        this.bValue = bValue
        this.diffName = diffName
        this.aMinusB = aMinusB
    }
}
