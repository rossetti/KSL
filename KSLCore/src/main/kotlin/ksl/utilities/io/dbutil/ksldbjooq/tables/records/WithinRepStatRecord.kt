/*
 * This file is generated by jOOQ.
 */
package ksl.utilities.io.dbutil.ksldbjooq.tables.records


import ksl.utilities.io.dbutil.ksldbjooq.tables.WithinRepStat

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record14
import org.jooq.Row14
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class WithinRepStatRecord() : UpdatableRecordImpl<WithinRepStatRecord>(WithinRepStat.WITHIN_REP_STAT), Record14<Int?, Int?, Int?, Int?, String?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var elementIdFk: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var simRunIdFk: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var repId: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var statName: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var statCount: Double?
        set(value): Unit = set(5, value)
        get(): Double? = get(5) as Double?

    open var average: Double?
        set(value): Unit = set(6, value)
        get(): Double? = get(6) as Double?

    open var minimum: Double?
        set(value): Unit = set(7, value)
        get(): Double? = get(7) as Double?

    open var maximum: Double?
        set(value): Unit = set(8, value)
        get(): Double? = get(8) as Double?

    open var weightedSum: Double?
        set(value): Unit = set(9, value)
        get(): Double? = get(9) as Double?

    open var sumOfWeights: Double?
        set(value): Unit = set(10, value)
        get(): Double? = get(10) as Double?

    open var weightedSsq: Double?
        set(value): Unit = set(11, value)
        get(): Double? = get(11) as Double?

    open var lastValue: Double?
        set(value): Unit = set(12, value)
        get(): Double? = get(12) as Double?

    open var lastWeight: Double?
        set(value): Unit = set(13, value)
        get(): Double? = get(13) as Double?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row14<Int?, Int?, Int?, Int?, String?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?> = super.fieldsRow() as Row14<Int?, Int?, Int?, Int?, String?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?>
    override fun valuesRow(): Row14<Int?, Int?, Int?, Int?, String?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?> = super.valuesRow() as Row14<Int?, Int?, Int?, Int?, String?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?>
    override fun field1(): Field<Int?> = WithinRepStat.WITHIN_REP_STAT.ID
    override fun field2(): Field<Int?> = WithinRepStat.WITHIN_REP_STAT.ELEMENT_ID_FK
    override fun field3(): Field<Int?> = WithinRepStat.WITHIN_REP_STAT.SIM_RUN_ID_FK
    override fun field4(): Field<Int?> = WithinRepStat.WITHIN_REP_STAT.REP_ID
    override fun field5(): Field<String?> = WithinRepStat.WITHIN_REP_STAT.STAT_NAME
    override fun field6(): Field<Double?> = WithinRepStat.WITHIN_REP_STAT.STAT_COUNT
    override fun field7(): Field<Double?> = WithinRepStat.WITHIN_REP_STAT.AVERAGE
    override fun field8(): Field<Double?> = WithinRepStat.WITHIN_REP_STAT.MINIMUM
    override fun field9(): Field<Double?> = WithinRepStat.WITHIN_REP_STAT.MAXIMUM
    override fun field10(): Field<Double?> = WithinRepStat.WITHIN_REP_STAT.WEIGHTED_SUM
    override fun field11(): Field<Double?> = WithinRepStat.WITHIN_REP_STAT.SUM_OF_WEIGHTS
    override fun field12(): Field<Double?> = WithinRepStat.WITHIN_REP_STAT.WEIGHTED_SSQ
    override fun field13(): Field<Double?> = WithinRepStat.WITHIN_REP_STAT.LAST_VALUE
    override fun field14(): Field<Double?> = WithinRepStat.WITHIN_REP_STAT.LAST_WEIGHT
    override fun component1(): Int? = id
    override fun component2(): Int? = elementIdFk
    override fun component3(): Int? = simRunIdFk
    override fun component4(): Int? = repId
    override fun component5(): String? = statName
    override fun component6(): Double? = statCount
    override fun component7(): Double? = average
    override fun component8(): Double? = minimum
    override fun component9(): Double? = maximum
    override fun component10(): Double? = weightedSum
    override fun component11(): Double? = sumOfWeights
    override fun component12(): Double? = weightedSsq
    override fun component13(): Double? = lastValue
    override fun component14(): Double? = lastWeight
    override fun value1(): Int? = id
    override fun value2(): Int? = elementIdFk
    override fun value3(): Int? = simRunIdFk
    override fun value4(): Int? = repId
    override fun value5(): String? = statName
    override fun value6(): Double? = statCount
    override fun value7(): Double? = average
    override fun value8(): Double? = minimum
    override fun value9(): Double? = maximum
    override fun value10(): Double? = weightedSum
    override fun value11(): Double? = sumOfWeights
    override fun value12(): Double? = weightedSsq
    override fun value13(): Double? = lastValue
    override fun value14(): Double? = lastWeight

    override fun value1(value: Int?): WithinRepStatRecord {
        this.id = value
        return this
    }

    override fun value2(value: Int?): WithinRepStatRecord {
        this.elementIdFk = value
        return this
    }

    override fun value3(value: Int?): WithinRepStatRecord {
        this.simRunIdFk = value
        return this
    }

    override fun value4(value: Int?): WithinRepStatRecord {
        this.repId = value
        return this
    }

    override fun value5(value: String?): WithinRepStatRecord {
        this.statName = value
        return this
    }

    override fun value6(value: Double?): WithinRepStatRecord {
        this.statCount = value
        return this
    }

    override fun value7(value: Double?): WithinRepStatRecord {
        this.average = value
        return this
    }

    override fun value8(value: Double?): WithinRepStatRecord {
        this.minimum = value
        return this
    }

    override fun value9(value: Double?): WithinRepStatRecord {
        this.maximum = value
        return this
    }

    override fun value10(value: Double?): WithinRepStatRecord {
        this.weightedSum = value
        return this
    }

    override fun value11(value: Double?): WithinRepStatRecord {
        this.sumOfWeights = value
        return this
    }

    override fun value12(value: Double?): WithinRepStatRecord {
        this.weightedSsq = value
        return this
    }

    override fun value13(value: Double?): WithinRepStatRecord {
        this.lastValue = value
        return this
    }

    override fun value14(value: Double?): WithinRepStatRecord {
        this.lastWeight = value
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: Int?, value4: Int?, value5: String?, value6: Double?, value7: Double?, value8: Double?, value9: Double?, value10: Double?, value11: Double?, value12: Double?, value13: Double?, value14: Double?): WithinRepStatRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        this.value11(value11)
        this.value12(value12)
        this.value13(value13)
        this.value14(value14)
        return this
    }

    /**
     * Create a detached, initialised WithinRepStatRecord
     */
    constructor(id: Int? = null, elementIdFk: Int? = null, simRunIdFk: Int? = null, repId: Int? = null, statName: String? = null, statCount: Double? = null, average: Double? = null, minimum: Double? = null, maximum: Double? = null, weightedSum: Double? = null, sumOfWeights: Double? = null, weightedSsq: Double? = null, lastValue: Double? = null, lastWeight: Double? = null): this() {
        this.id = id
        this.elementIdFk = elementIdFk
        this.simRunIdFk = simRunIdFk
        this.repId = repId
        this.statName = statName
        this.statCount = statCount
        this.average = average
        this.minimum = minimum
        this.maximum = maximum
        this.weightedSum = weightedSum
        this.sumOfWeights = sumOfWeights
        this.weightedSsq = weightedSsq
        this.lastValue = lastValue
        this.lastWeight = lastWeight
    }
}
