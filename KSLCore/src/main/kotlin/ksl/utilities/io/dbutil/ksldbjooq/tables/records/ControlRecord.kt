/*
 * This file is generated by jOOQ.
 */
package ksl.utilities.io.dbutil.ksldbjooq.tables.records


import ksl.utilities.io.dbutil.ksldbjooq.tables.Control

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record10
import org.jooq.Row10
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ControlRecord() : UpdatableRecordImpl<ControlRecord>(Control.CONTROL), Record10<Int?, Int?, Int?, String?, Double?, Double?, Double?, String?, String?, String?> {

    open var controlId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var expIdFk: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var elementIdFk: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var keyName: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var controlValue: Double?
        set(value): Unit = set(4, value)
        get(): Double? = get(4) as Double?

    open var lowerBound: Double?
        set(value): Unit = set(5, value)
        get(): Double? = get(5) as Double?

    open var upperBound: Double?
        set(value): Unit = set(6, value)
        get(): Double? = get(6) as Double?

    open var propertyName: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open var controlType: String?
        set(value): Unit = set(8, value)
        get(): String? = get(8) as String?

    open var comment: String?
        set(value): Unit = set(9, value)
        get(): String? = get(9) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row10<Int?, Int?, Int?, String?, Double?, Double?, Double?, String?, String?, String?> = super.fieldsRow() as Row10<Int?, Int?, Int?, String?, Double?, Double?, Double?, String?, String?, String?>
    override fun valuesRow(): Row10<Int?, Int?, Int?, String?, Double?, Double?, Double?, String?, String?, String?> = super.valuesRow() as Row10<Int?, Int?, Int?, String?, Double?, Double?, Double?, String?, String?, String?>
    override fun field1(): Field<Int?> = Control.CONTROL.CONTROL_ID
    override fun field2(): Field<Int?> = Control.CONTROL.EXP_ID_FK
    override fun field3(): Field<Int?> = Control.CONTROL.ELEMENT_ID_FK
    override fun field4(): Field<String?> = Control.CONTROL.KEY_NAME
    override fun field5(): Field<Double?> = Control.CONTROL.CONTROL_VALUE
    override fun field6(): Field<Double?> = Control.CONTROL.LOWER_BOUND
    override fun field7(): Field<Double?> = Control.CONTROL.UPPER_BOUND
    override fun field8(): Field<String?> = Control.CONTROL.PROPERTY_NAME
    override fun field9(): Field<String?> = Control.CONTROL.CONTROL_TYPE
    override fun field10(): Field<String?> = Control.CONTROL.COMMENT
    override fun component1(): Int? = controlId
    override fun component2(): Int? = expIdFk
    override fun component3(): Int? = elementIdFk
    override fun component4(): String? = keyName
    override fun component5(): Double? = controlValue
    override fun component6(): Double? = lowerBound
    override fun component7(): Double? = upperBound
    override fun component8(): String? = propertyName
    override fun component9(): String? = controlType
    override fun component10(): String? = comment
    override fun value1(): Int? = controlId
    override fun value2(): Int? = expIdFk
    override fun value3(): Int? = elementIdFk
    override fun value4(): String? = keyName
    override fun value5(): Double? = controlValue
    override fun value6(): Double? = lowerBound
    override fun value7(): Double? = upperBound
    override fun value8(): String? = propertyName
    override fun value9(): String? = controlType
    override fun value10(): String? = comment

    override fun value1(value: Int?): ControlRecord {
        this.controlId = value
        return this
    }

    override fun value2(value: Int?): ControlRecord {
        this.expIdFk = value
        return this
    }

    override fun value3(value: Int?): ControlRecord {
        this.elementIdFk = value
        return this
    }

    override fun value4(value: String?): ControlRecord {
        this.keyName = value
        return this
    }

    override fun value5(value: Double?): ControlRecord {
        this.controlValue = value
        return this
    }

    override fun value6(value: Double?): ControlRecord {
        this.lowerBound = value
        return this
    }

    override fun value7(value: Double?): ControlRecord {
        this.upperBound = value
        return this
    }

    override fun value8(value: String?): ControlRecord {
        this.propertyName = value
        return this
    }

    override fun value9(value: String?): ControlRecord {
        this.controlType = value
        return this
    }

    override fun value10(value: String?): ControlRecord {
        this.comment = value
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: Int?, value4: String?, value5: Double?, value6: Double?, value7: Double?, value8: String?, value9: String?, value10: String?): ControlRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        return this
    }

    /**
     * Create a detached, initialised ControlRecord
     */
    constructor(controlId: Int? = null, expIdFk: Int? = null, elementIdFk: Int? = null, keyName: String? = null, controlValue: Double? = null, lowerBound: Double? = null, upperBound: Double? = null, propertyName: String? = null, controlType: String? = null, comment: String? = null): this() {
        this.controlId = controlId
        this.expIdFk = expIdFk
        this.elementIdFk = elementIdFk
        this.keyName = keyName
        this.controlValue = controlValue
        this.lowerBound = lowerBound
        this.upperBound = upperBound
        this.propertyName = propertyName
        this.controlType = controlType
        this.comment = comment
    }
}
