/*
 * This file is generated by jOOQ.
 */
package ksl.utilities.io.dbutil.ksldbjooq.tables


import java.util.function.Function

import kotlin.collections.List

import ksl.utilities.io.dbutil.ksldbjooq.KslDb
import ksl.utilities.io.dbutil.ksldbjooq.keys.ME_EXP_ID_FK
import ksl.utilities.io.dbutil.ksldbjooq.keys.ME_NAME_UNIQUE
import ksl.utilities.io.dbutil.ksldbjooq.keys.ME_PRIM_KY
import ksl.utilities.io.dbutil.ksldbjooq.tables.records.ModelElementRecord

import org.jooq.Check
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ModelElement(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ModelElementRecord>?,
    aliased: Table<ModelElementRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ModelElementRecord>(
    alias,
    KslDb.KSL_DB,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>KSL_DB.MODEL_ELEMENT</code>
         */
        val MODEL_ELEMENT: ModelElement = ModelElement()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ModelElementRecord> = ModelElementRecord::class.java

    /**
     * The column <code>KSL_DB.MODEL_ELEMENT.EXP_ID_FK</code>.
     */
    val EXP_ID_FK: TableField<ModelElementRecord, Int?> = createField(DSL.name("EXP_ID_FK"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>KSL_DB.MODEL_ELEMENT.ELEMENT_ID</code>.
     */
    val ELEMENT_ID: TableField<ModelElementRecord, Int?> = createField(DSL.name("ELEMENT_ID"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>KSL_DB.MODEL_ELEMENT.ELEMENT_NAME</code>.
     */
    val ELEMENT_NAME: TableField<ModelElementRecord, String?> = createField(DSL.name("ELEMENT_NAME"), SQLDataType.VARCHAR(510).nullable(false), this, "")

    /**
     * The column <code>KSL_DB.MODEL_ELEMENT.CLASS_NAME</code>.
     */
    val CLASS_NAME: TableField<ModelElementRecord, String?> = createField(DSL.name("CLASS_NAME"), SQLDataType.VARCHAR(510).nullable(false), this, "")

    /**
     * The column <code>KSL_DB.MODEL_ELEMENT.PARENT_ID_FK</code>.
     */
    val PARENT_ID_FK: TableField<ModelElementRecord, Int?> = createField(DSL.name("PARENT_ID_FK"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>KSL_DB.MODEL_ELEMENT.PARENT_NAME</code>.
     */
    val PARENT_NAME: TableField<ModelElementRecord, String?> = createField(DSL.name("PARENT_NAME"), SQLDataType.VARCHAR(510), this, "")

    /**
     * The column <code>KSL_DB.MODEL_ELEMENT.LEFT_COUNT</code>.
     */
    val LEFT_COUNT: TableField<ModelElementRecord, Int?> = createField(DSL.name("LEFT_COUNT"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>KSL_DB.MODEL_ELEMENT.RIGHT_COUNT</code>.
     */
    val RIGHT_COUNT: TableField<ModelElementRecord, Int?> = createField(DSL.name("RIGHT_COUNT"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ModelElementRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ModelElementRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>KSL_DB.MODEL_ELEMENT</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>KSL_DB.MODEL_ELEMENT</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>KSL_DB.MODEL_ELEMENT</code> table reference
     */
    constructor(): this(DSL.name("MODEL_ELEMENT"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ModelElementRecord>): this(Internal.createPathAlias(child, key), child, key, MODEL_ELEMENT, null)
    override fun getSchema(): Schema? = if (aliased()) null else KslDb.KSL_DB
    override fun getPrimaryKey(): UniqueKey<ModelElementRecord> = ME_PRIM_KY
    override fun getUniqueKeys(): List<UniqueKey<ModelElementRecord>> = listOf(ME_NAME_UNIQUE)
    override fun getReferences(): List<ForeignKey<ModelElementRecord, *>> = listOf(ME_EXP_ID_FK)

    private lateinit var _experiment: Experiment

    /**
     * Get the implicit join path to the <code>KSL_DB.EXPERIMENT</code> table.
     */
    fun experiment(): Experiment {
        if (!this::_experiment.isInitialized)
            _experiment = Experiment(this, ME_EXP_ID_FK)

        return _experiment;
    }

    val experiment: Experiment
        get(): Experiment = experiment()
    override fun getChecks(): List<Check<ModelElementRecord>> = listOf(
        Internal.createCheck(this, DSL.name("SQL0000000090-120fc126-0186-32ba-7cc1-00000b26c650"), "(LEFT_COUNT > 0)", true),
        Internal.createCheck(this, DSL.name("SQL0000000091-0a594127-0186-32ba-7cc1-00000b26c650"), "(RIGHT_COUNT > 1)", true),
        Internal.createCheck(this, DSL.name("TRAVERSAL_ORDER_OKAY"), "(LEFT_COUNT < RIGHT_COUNT)", true)
    )
    override fun `as`(alias: String): ModelElement = ModelElement(DSL.name(alias), this)
    override fun `as`(alias: Name): ModelElement = ModelElement(alias, this)
    override fun `as`(alias: Table<*>): ModelElement = ModelElement(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ModelElement = ModelElement(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ModelElement = ModelElement(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ModelElement = ModelElement(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<Int?, Int?, String?, String?, Int?, String?, Int?, Int?> = super.fieldsRow() as Row8<Int?, Int?, String?, String?, Int?, String?, Int?, Int?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Int?, String?, String?, Int?, String?, Int?, Int?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Int?, String?, String?, Int?, String?, Int?, Int?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
