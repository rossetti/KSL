/*
 * This file is generated by jOOQ.
 */
package ksl.utilities.io.dbutil.ksldbjooq.tables.records


import ksl.utilities.io.dbutil.ksldbjooq.tables.AcrossRepStat

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record21
import org.jooq.Row21
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AcrossRepStatRecord() : UpdatableRecordImpl<AcrossRepStatRecord>(AcrossRepStat.ACROSS_REP_STAT), Record21<Int?, Int?, Int?, String?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var elementIdFk: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var simRunIdFk: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var statName: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var statCount: Double?
        set(value): Unit = set(4, value)
        get(): Double? = get(4) as Double?

    open var average: Double?
        set(value): Unit = set(5, value)
        get(): Double? = get(5) as Double?

    open var stdDev: Double?
        set(value): Unit = set(6, value)
        get(): Double? = get(6) as Double?

    open var stdErr: Double?
        set(value): Unit = set(7, value)
        get(): Double? = get(7) as Double?

    open var halfWidth: Double?
        set(value): Unit = set(8, value)
        get(): Double? = get(8) as Double?

    open var confLevel: Double?
        set(value): Unit = set(9, value)
        get(): Double? = get(9) as Double?

    open var minimum: Double?
        set(value): Unit = set(10, value)
        get(): Double? = get(10) as Double?

    open var maximum: Double?
        set(value): Unit = set(11, value)
        get(): Double? = get(11) as Double?

    open var sumOfObs: Double?
        set(value): Unit = set(12, value)
        get(): Double? = get(12) as Double?

    open var devSsq: Double?
        set(value): Unit = set(13, value)
        get(): Double? = get(13) as Double?

    open var lastValue: Double?
        set(value): Unit = set(14, value)
        get(): Double? = get(14) as Double?

    open var kurtosis: Double?
        set(value): Unit = set(15, value)
        get(): Double? = get(15) as Double?

    open var skewness: Double?
        set(value): Unit = set(16, value)
        get(): Double? = get(16) as Double?

    open var lag1Cov: Double?
        set(value): Unit = set(17, value)
        get(): Double? = get(17) as Double?

    open var lag1Corr: Double?
        set(value): Unit = set(18, value)
        get(): Double? = get(18) as Double?

    open var vonNeumannLag1Stat: Double?
        set(value): Unit = set(19, value)
        get(): Double? = get(19) as Double?

    open var numMissingObs: Double?
        set(value): Unit = set(20, value)
        get(): Double? = get(20) as Double?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record21 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row21<Int?, Int?, Int?, String?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?> = super.fieldsRow() as Row21<Int?, Int?, Int?, String?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?>
    override fun valuesRow(): Row21<Int?, Int?, Int?, String?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?> = super.valuesRow() as Row21<Int?, Int?, Int?, String?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?, Double?>
    override fun field1(): Field<Int?> = AcrossRepStat.ACROSS_REP_STAT.ID
    override fun field2(): Field<Int?> = AcrossRepStat.ACROSS_REP_STAT.ELEMENT_ID_FK
    override fun field3(): Field<Int?> = AcrossRepStat.ACROSS_REP_STAT.SIM_RUN_ID_FK
    override fun field4(): Field<String?> = AcrossRepStat.ACROSS_REP_STAT.STAT_NAME
    override fun field5(): Field<Double?> = AcrossRepStat.ACROSS_REP_STAT.STAT_COUNT
    override fun field6(): Field<Double?> = AcrossRepStat.ACROSS_REP_STAT.AVERAGE
    override fun field7(): Field<Double?> = AcrossRepStat.ACROSS_REP_STAT.STD_DEV
    override fun field8(): Field<Double?> = AcrossRepStat.ACROSS_REP_STAT.STD_ERR
    override fun field9(): Field<Double?> = AcrossRepStat.ACROSS_REP_STAT.HALF_WIDTH
    override fun field10(): Field<Double?> = AcrossRepStat.ACROSS_REP_STAT.CONF_LEVEL
    override fun field11(): Field<Double?> = AcrossRepStat.ACROSS_REP_STAT.MINIMUM
    override fun field12(): Field<Double?> = AcrossRepStat.ACROSS_REP_STAT.MAXIMUM
    override fun field13(): Field<Double?> = AcrossRepStat.ACROSS_REP_STAT.SUM_OF_OBS
    override fun field14(): Field<Double?> = AcrossRepStat.ACROSS_REP_STAT.DEV_SSQ
    override fun field15(): Field<Double?> = AcrossRepStat.ACROSS_REP_STAT.LAST_VALUE
    override fun field16(): Field<Double?> = AcrossRepStat.ACROSS_REP_STAT.KURTOSIS
    override fun field17(): Field<Double?> = AcrossRepStat.ACROSS_REP_STAT.SKEWNESS
    override fun field18(): Field<Double?> = AcrossRepStat.ACROSS_REP_STAT.LAG1_COV
    override fun field19(): Field<Double?> = AcrossRepStat.ACROSS_REP_STAT.LAG1_CORR
    override fun field20(): Field<Double?> = AcrossRepStat.ACROSS_REP_STAT.VON_NEUMANN_LAG1_STAT
    override fun field21(): Field<Double?> = AcrossRepStat.ACROSS_REP_STAT.NUM_MISSING_OBS
    override fun component1(): Int? = id
    override fun component2(): Int? = elementIdFk
    override fun component3(): Int? = simRunIdFk
    override fun component4(): String? = statName
    override fun component5(): Double? = statCount
    override fun component6(): Double? = average
    override fun component7(): Double? = stdDev
    override fun component8(): Double? = stdErr
    override fun component9(): Double? = halfWidth
    override fun component10(): Double? = confLevel
    override fun component11(): Double? = minimum
    override fun component12(): Double? = maximum
    override fun component13(): Double? = sumOfObs
    override fun component14(): Double? = devSsq
    override fun component15(): Double? = lastValue
    override fun component16(): Double? = kurtosis
    override fun component17(): Double? = skewness
    override fun component18(): Double? = lag1Cov
    override fun component19(): Double? = lag1Corr
    override fun component20(): Double? = vonNeumannLag1Stat
    override fun component21(): Double? = numMissingObs
    override fun value1(): Int? = id
    override fun value2(): Int? = elementIdFk
    override fun value3(): Int? = simRunIdFk
    override fun value4(): String? = statName
    override fun value5(): Double? = statCount
    override fun value6(): Double? = average
    override fun value7(): Double? = stdDev
    override fun value8(): Double? = stdErr
    override fun value9(): Double? = halfWidth
    override fun value10(): Double? = confLevel
    override fun value11(): Double? = minimum
    override fun value12(): Double? = maximum
    override fun value13(): Double? = sumOfObs
    override fun value14(): Double? = devSsq
    override fun value15(): Double? = lastValue
    override fun value16(): Double? = kurtosis
    override fun value17(): Double? = skewness
    override fun value18(): Double? = lag1Cov
    override fun value19(): Double? = lag1Corr
    override fun value20(): Double? = vonNeumannLag1Stat
    override fun value21(): Double? = numMissingObs

    override fun value1(value: Int?): AcrossRepStatRecord {
        this.id = value
        return this
    }

    override fun value2(value: Int?): AcrossRepStatRecord {
        this.elementIdFk = value
        return this
    }

    override fun value3(value: Int?): AcrossRepStatRecord {
        this.simRunIdFk = value
        return this
    }

    override fun value4(value: String?): AcrossRepStatRecord {
        this.statName = value
        return this
    }

    override fun value5(value: Double?): AcrossRepStatRecord {
        this.statCount = value
        return this
    }

    override fun value6(value: Double?): AcrossRepStatRecord {
        this.average = value
        return this
    }

    override fun value7(value: Double?): AcrossRepStatRecord {
        this.stdDev = value
        return this
    }

    override fun value8(value: Double?): AcrossRepStatRecord {
        this.stdErr = value
        return this
    }

    override fun value9(value: Double?): AcrossRepStatRecord {
        this.halfWidth = value
        return this
    }

    override fun value10(value: Double?): AcrossRepStatRecord {
        this.confLevel = value
        return this
    }

    override fun value11(value: Double?): AcrossRepStatRecord {
        this.minimum = value
        return this
    }

    override fun value12(value: Double?): AcrossRepStatRecord {
        this.maximum = value
        return this
    }

    override fun value13(value: Double?): AcrossRepStatRecord {
        this.sumOfObs = value
        return this
    }

    override fun value14(value: Double?): AcrossRepStatRecord {
        this.devSsq = value
        return this
    }

    override fun value15(value: Double?): AcrossRepStatRecord {
        this.lastValue = value
        return this
    }

    override fun value16(value: Double?): AcrossRepStatRecord {
        this.kurtosis = value
        return this
    }

    override fun value17(value: Double?): AcrossRepStatRecord {
        this.skewness = value
        return this
    }

    override fun value18(value: Double?): AcrossRepStatRecord {
        this.lag1Cov = value
        return this
    }

    override fun value19(value: Double?): AcrossRepStatRecord {
        this.lag1Corr = value
        return this
    }

    override fun value20(value: Double?): AcrossRepStatRecord {
        this.vonNeumannLag1Stat = value
        return this
    }

    override fun value21(value: Double?): AcrossRepStatRecord {
        this.numMissingObs = value
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: Int?, value4: String?, value5: Double?, value6: Double?, value7: Double?, value8: Double?, value9: Double?, value10: Double?, value11: Double?, value12: Double?, value13: Double?, value14: Double?, value15: Double?, value16: Double?, value17: Double?, value18: Double?, value19: Double?, value20: Double?, value21: Double?): AcrossRepStatRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        this.value11(value11)
        this.value12(value12)
        this.value13(value13)
        this.value14(value14)
        this.value15(value15)
        this.value16(value16)
        this.value17(value17)
        this.value18(value18)
        this.value19(value19)
        this.value20(value20)
        this.value21(value21)
        return this
    }

    /**
     * Create a detached, initialised AcrossRepStatRecord
     */
    constructor(id: Int? = null, elementIdFk: Int? = null, simRunIdFk: Int? = null, statName: String? = null, statCount: Double? = null, average: Double? = null, stdDev: Double? = null, stdErr: Double? = null, halfWidth: Double? = null, confLevel: Double? = null, minimum: Double? = null, maximum: Double? = null, sumOfObs: Double? = null, devSsq: Double? = null, lastValue: Double? = null, kurtosis: Double? = null, skewness: Double? = null, lag1Cov: Double? = null, lag1Corr: Double? = null, vonNeumannLag1Stat: Double? = null, numMissingObs: Double? = null): this() {
        this.id = id
        this.elementIdFk = elementIdFk
        this.simRunIdFk = simRunIdFk
        this.statName = statName
        this.statCount = statCount
        this.average = average
        this.stdDev = stdDev
        this.stdErr = stdErr
        this.halfWidth = halfWidth
        this.confLevel = confLevel
        this.minimum = minimum
        this.maximum = maximum
        this.sumOfObs = sumOfObs
        this.devSsq = devSsq
        this.lastValue = lastValue
        this.kurtosis = kurtosis
        this.skewness = skewness
        this.lag1Cov = lag1Cov
        this.lag1Corr = lag1Corr
        this.vonNeumannLag1Stat = vonNeumannLag1Stat
        this.numMissingObs = numMissingObs
    }
}
