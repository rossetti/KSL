/*
 * This file is generated by jOOQ.
 */
package ksl.utilities.io.dbutil.ksldbjooq.tables.records


import ksl.utilities.io.dbutil.ksldbjooq.tables.ModelElement

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ModelElementRecord() : UpdatableRecordImpl<ModelElementRecord>(ModelElement.MODEL_ELEMENT), Record8<Int?, Int?, String?, String?, Int?, String?, Int?, Int?> {

    open var expIdFk: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var elementId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var elementName: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var className: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var parentIdFk: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open var parentName: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var leftCount: Int?
        set(value): Unit = set(6, value)
        get(): Int? = get(6) as Int?

    open var rightCount: Int?
        set(value): Unit = set(7, value)
        get(): Int? = get(7) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<Int?, Int?> = super.key() as Record2<Int?, Int?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Int?, Int?, String?, String?, Int?, String?, Int?, Int?> = super.fieldsRow() as Row8<Int?, Int?, String?, String?, Int?, String?, Int?, Int?>
    override fun valuesRow(): Row8<Int?, Int?, String?, String?, Int?, String?, Int?, Int?> = super.valuesRow() as Row8<Int?, Int?, String?, String?, Int?, String?, Int?, Int?>
    override fun field1(): Field<Int?> = ModelElement.MODEL_ELEMENT.EXP_ID_FK
    override fun field2(): Field<Int?> = ModelElement.MODEL_ELEMENT.ELEMENT_ID
    override fun field3(): Field<String?> = ModelElement.MODEL_ELEMENT.ELEMENT_NAME
    override fun field4(): Field<String?> = ModelElement.MODEL_ELEMENT.CLASS_NAME
    override fun field5(): Field<Int?> = ModelElement.MODEL_ELEMENT.PARENT_ID_FK
    override fun field6(): Field<String?> = ModelElement.MODEL_ELEMENT.PARENT_NAME
    override fun field7(): Field<Int?> = ModelElement.MODEL_ELEMENT.LEFT_COUNT
    override fun field8(): Field<Int?> = ModelElement.MODEL_ELEMENT.RIGHT_COUNT
    override fun component1(): Int? = expIdFk
    override fun component2(): Int? = elementId
    override fun component3(): String? = elementName
    override fun component4(): String? = className
    override fun component5(): Int? = parentIdFk
    override fun component6(): String? = parentName
    override fun component7(): Int? = leftCount
    override fun component8(): Int? = rightCount
    override fun value1(): Int? = expIdFk
    override fun value2(): Int? = elementId
    override fun value3(): String? = elementName
    override fun value4(): String? = className
    override fun value5(): Int? = parentIdFk
    override fun value6(): String? = parentName
    override fun value7(): Int? = leftCount
    override fun value8(): Int? = rightCount

    override fun value1(value: Int?): ModelElementRecord {
        this.expIdFk = value
        return this
    }

    override fun value2(value: Int?): ModelElementRecord {
        this.elementId = value
        return this
    }

    override fun value3(value: String?): ModelElementRecord {
        this.elementName = value
        return this
    }

    override fun value4(value: String?): ModelElementRecord {
        this.className = value
        return this
    }

    override fun value5(value: Int?): ModelElementRecord {
        this.parentIdFk = value
        return this
    }

    override fun value6(value: String?): ModelElementRecord {
        this.parentName = value
        return this
    }

    override fun value7(value: Int?): ModelElementRecord {
        this.leftCount = value
        return this
    }

    override fun value8(value: Int?): ModelElementRecord {
        this.rightCount = value
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: String?, value4: String?, value5: Int?, value6: String?, value7: Int?, value8: Int?): ModelElementRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised ModelElementRecord
     */
    constructor(expIdFk: Int? = null, elementId: Int? = null, elementName: String? = null, className: String? = null, parentIdFk: Int? = null, parentName: String? = null, leftCount: Int? = null, rightCount: Int? = null): this() {
        this.expIdFk = expIdFk
        this.elementId = elementId
        this.elementName = elementName
        this.className = className
        this.parentIdFk = parentIdFk
        this.parentName = parentName
        this.leftCount = leftCount
        this.rightCount = rightCount
    }
}
